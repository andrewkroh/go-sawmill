// Foo License
// Code generated by processor/generate.go - DO NOT EDIT.
package set

import (
	"github.com/andrewkroh/go-event-pipeline/pkg/processor"
	"github.com/andrewkroh/go-event-pipeline/pkg/processor/registry"
)

func init() {
	registry.MustRegister(processorName, New)
}

const (
	processorName = "set"
)

// Config contains the configuration options for the set processor.
type Config struct {
	// The origin field which will be copied to target_field.
	CopyFrom string `config:"copy_from"`

	// Ignore failures for the processor.
	IgnoreFailure bool `config:"ignore_failure"`

	// If true and field does not exist or is null, the processor quietly
	// returns without modifying the document.
	IgnoreMissing bool `config:"ignore_missing"`

	// The field to assign the output value to, by default field is updated
	// in-place.
	TargetField string `config:"target_field"`

	// The value to be set for the field.
	Value interface{} `config:"value"`
}

// InitDefaults initializes the configuration options to their default values.
func (c *Config) InitDefaults() {
	c.IgnoreFailure = false
	c.IgnoreMissing = false
}

// Sets one field and associates it with the specified value. If the field
// already exists, its value will be replaced with the provided one.
type Set struct {
	config Config
}

// New returns a new Set processor.
func New(config Config) (*Set, error) {
	return &Set{config: config}, nil
}

// Config returns the Set processor config.
func (p *Set) Config() Config {
	return p.config
}

func (p *Set) String() string {
	return processor.ConfigString(processorName, p.config)
}
